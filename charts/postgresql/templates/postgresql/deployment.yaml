apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "postgres-fullname" . }}
  labels:
    app: {{ template "postgres-fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  template:
    metadata:
      name: {{ template "postgres-fullname" . }}
      labels:
        app: {{ template "postgres-fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
      {{- if .Values.prometheusExporter.enabled }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
      {{- end }}
    spec:
      containers:
      - name: postgresql
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env:
        - name: POSTGRES_USER
          value: {{ .Values.credentials.user | quote }}
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: {{ .Values.credentials.user | quote }}
        - name: POSTGRES_DB
          value: {{ .Values.postgresDatabase | quote }}
        - name: PGDATA
          value: /var/lib/postgres/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "postgres-fullname" . }}
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: {{ .Values.port }}
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
          timeoutSeconds: {{ .Values.probeTimeoutSeconds }}
          failureThreshold: {{ .Values.probeFailureThreshold }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgres/data/pgdata
      {{- if .Values.prometheusExporter.enabled }}
      - name: exporter
        image: "{{ .Values.prometheusExporter.image.repository }}{{ .Values.prometheusExporter.image.name }}:{{ .Values.prometheusExporter.image.tag }}"
        imagePullPolicy: {{ default "" .Values.prometheusExporter.image.pullPolicy | quote }}
        env:
        - name: DATA_SOURCE_NAME
          value: postgres://{{ .Values.credentials.user }}@127.0.0.1:{{ .Values.port }}/?sslmode=disable
        ports:
        - name: exporter
          containerPort: 9187
        resources:
{{ toYaml .Values.prometheusExporter.resources | indent 10 }}
      {{- end }}
      volumes:
      - name: data
      {{- if eq .Values.persistence.type "emptyDir" }}
        emptyDir: {}
      {{- else if eq .Values.persistence.type "hostPath" }}
        hostPath:
          path: {{ .Values.persistence.hostPath | quote }}
      {{- else if eq .Values.persistence.type "PersistentVolumeClaim" }}
        persistentVolumeClaim:
          claimName: {{ template "postgres-pvc-fullname" . }}
      {{- end -}}
