apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "datanode-fullname" . }}
  labels:
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: {{ template "datanode-fullname" . }}
spec:
  serviceName: {{ template "datanode-fullname" . }}
  replicas: {{ .Values.datanode.replicas }}
  template:
    metadata:
      labels:
        release: "{{ .Release.Name }}"
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: {{ template "datanode-fullname" . }}
    spec:
      initContainers:
      - name: wait-namenode
        image: '{{ .Values.datanode.image.repository }}{{ .Values.datanode.image.name }}:{{ .Values.datanode.image.tag }}'
        imagePullPolicy: '{{ .Values.datanode.image.pullPolicy }}'
        command:
        - bash
        - -c
        - while [[ $ready != 0 ]]; do curl {{ template "namenode-fullname" . }}:50070; ready=$?; sleep 3; done
      {{- if eq .Values.datanode.antiAffinity "hard"}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["{{ template "datanode-fullname" . }}"]
            topologyKey: kubernetes.io/hostname
      {{- else if eq .Values.datanode.antiAffinity "soft"}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["{{ template "datanode-fullname" . }}"]
              topologyKey: kubernetes.io/hostname
      {{- end}}
      containers:
        - name: datanode
          image: "{{ .Values.datanode.image.repository }}{{ .Values.datanode.image.name }}:{{ .Values.datanode.image.tag }}"
          imagePullPolicy: "{{ .Values.datanode.image.pullPolicy }}"
          env:
            - name: CORE_CONF_fs_defaultFS
              value: hdfs://{{ template "namenode-address" . }}
            - name: HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check
              value: "false"
            - name: HDFS_CONF_dfs_client_use_datanode_hostname
              value: "false"
            - name: HDFS_CONF_dfs_datanode_use_datanode_hostname
              value: "false"
          resources:
{{ toYaml .Values.datanode.resources | indent 12 }}
          volumeMounts:
            - name: hdfs-configs
              mountPath: /etc/hadoop/hdfs-site.xml
              subPath: hdfs-site.xml
            - name: datadir
              mountPath: /hadoop/dfs/data
      volumes:
        - configMap:
            name: {{ template "configmap-fullname" . }}
            items:
            - key: hdfs-site.xml
              path: hdfs-site.xml
          name: hdfs-configs
        {{- if eq .Values.datanode.persistence.type "emptyDir" }}
        - name: datadir
          emptyDir: {}
        {{- else if eq .Values.datanode.persistence.type "hostPath" }}
        - name: datadir
          hostPath:
	          path: "{{ .Values.datanode.persistence.hostPath }}"
        {{- end }}
  {{- if eq .Values.datanode.persistence.type "PersistentVolumeClaim" }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
      {{- if .Values.datanode.persistence.storageClass }}
      annotations:
        volume.beta.kubernetes.io/storage-class: "{{ .Values.datanode.persistence.storageClass }}"
      {{- end }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.datanode.persistence.volumeSize }}
  {{- end }}
