apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "zk-fullname" . }}
  labels:
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: {{ template "zk-fullname" . }}
spec:
  serviceName: {{ template "zk-fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        release: "{{ .Release.Name }}"
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: {{ template "zk-fullname" . }}
      annotations:
        {{- if .Values.prometheusExporter.enabled }}
        prometheus.io/scrape: "true"
        {{- end }}
    spec:
      {{- if ne .Values.persistence.type "emptyDir" }}
      initContainers:
      - name: zookeeper-init
        image: busybox
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - chown -R 1000:1000 /var/lib/zookeeper
        volumeMounts:
        - mountPath: /var/lib/zookeeper
          name: datadir
      {{- end }}
      {{- if eq .Values.antiAffinity "hard"}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["{{ template "zk-fullname" . }}"]
            topologyKey: kubernetes.io/hostname
      {{- else if eq .Values.antiAffinity "soft"}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["{{ template "zk-fullname" . }}"]
              topologyKey: kubernetes.io/hostname
      {{- end}}
      containers:
      - name: zookeeper
        image: "{{ .Values.image.repository }}{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.clientPort }}
          name: client
        - containerPort: {{ .Values.serverPort }}
          name: server
        - containerPort: {{ .Values.leaderElectionPort }}
          name: leader-election
        {{- if .Values.prometheusExporter.enabled }}
        - containerPort: 7071
          name: jmx
        {{- end }}
        env:
        - name: ZOO_LOG4J_PROP
          value: "INFO,CONSOLE,ROLLINGFILE"
        - name: ZK_REPLICAS
          value: "{{ .Values.replicas }}"
        - name: ZK_LOG_LEVEL
          value: "{{ .Values.logLevel }}"
        - name: ZK_CLIENT_PORT
          value: "{{ .Values.clientPort }}"
        - name: ZK_SERVER_PORT
          value: "{{ .Values.serverPort }}"
        - name: ZK_ELECTION_PORT
          value: "{{ .Values.leaderElectionPort }}"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        command:
        - entrypoint.sh
        lifecycle:
          preStop:
            exec:
              command:
              - zkReconfigRemove.sh
        readinessProbe:
          exec:
            command:
            - zkCheck.sh
          initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
          timeoutSeconds: {{ .Values.probeTimeoutSeconds }}
        livenessProbe:
          exec:
            command:
            - zkCheck.sh
          initialDelaySeconds: {{ .Values.probeInitialDelaySeconds }}
          timeoutSeconds: {{ .Values.probeTimeoutSeconds }}
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
        - name: zoo-cfg
          mountPath: /opt/zookeeper/configmap
        {{- if .Values.logCollector.enabled }}
        - name: logdir
          mountPath: /var/log/zookeeper
        {{- end }}
      {{- if .Values.logCollector.enabled }}
      - name: filebeat
        image: "{{ .Values.logCollector.image.repository }}{{ .Values.logCollector.image.name }}:{{ .Values.logCollector.image.tag }}"
        imagePullPolicy: {{ .Values.logCollector.image.pullPolicy | quote }}
        volumeMounts:
        - name: filebeat-config
          mountPath: /etc/filebeat
        - name: logdir
          mountPath: /var/log/zookeeper
        command:
          - "filebeat"
          - "-c"
          - "/etc/filebeat/filebeat.yml"
          - "-e"
          - "-d"
          - "\"*\""
      {{- end }}
      volumes:
      - name: zoo-cfg
        configMap:
          name: {{ template "zk-fullname" . }}
      {{- if eq .Values.persistence.type "emptyDir" }}
      - name: datadir
        emptyDir: {}
      {{- else if eq .Values.persistence.type "hostPath" }}
      - name: datadir
        hostPath:
          path: "{{ .Values.persistence.hostPath }}"
      {{- end }}
      {{- if .Values.logCollector.enabled }}
      - name: filebeat-config
        configMap:
          name: {{ printf "zk-fb-%s" .Release.Name | trunc 55 | trimSuffix "-" }}
          items:
            - key: filebeat-yml
              path: filebeat.yml
      - name: logdir
        emptyDir: {}
      {{- end }}
  {{- if eq .Values.persistence.type "PersistentVolumeClaim" }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
      {{- if .Values.persistence.storageClass }}
      annotations:
        volume.beta.kubernetes.io/storage-class: "{{ .Values.persistence.storageClass }}"
      {{- end }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.volumeSize }}
  {{- end }}
