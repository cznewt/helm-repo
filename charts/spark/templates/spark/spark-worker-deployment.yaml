apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "worker-fullname" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: {{ template "worker-fullname" . }}
spec:
  replicas: {{ .Values.spark.worker.replicas }}
  template:
    metadata:
      labels:
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: {{ template "worker-fullname" . }}
      {{- if .Values.prometheusExporter.enabled }}
      annotations:
        prometheus.io/scrape: "true"
      {{- end }}
    spec:
      containers:
        - name: worker
          image: {{ .Values.spark.image.repository }}{{ .Values.spark.image.name }}:{{ .Values.spark.image.tag }}
          imagePullPolicy: {{ .Values.spark.image.pullPolicy }}
          command:
            - /usr/local/spark/sbin/start-slave.sh
            - spark://{{ template "spark-address" . }}
          resources:
{{ toYaml .Values.spark.worker.resources | indent 12 }}
          env:
          - name: SPARK_DAEMON_MEMORY
            value: {{ .Values.spark.worker.daemonMemory | quote }}
          - name: SPARK_WORKER_MEMORY
            value: {{ .Values.spark.worker.executorMemory | quote }}
          - name: SPARK_NO_DAEMONIZE
            value: "1"
          {{- if .Values.prometheusExporter.enabled }}
          - name: SPARK_DAEMON_JAVA_OPTS
            value: "-javaagent:/usr/local/spark/jmx_prometheus_javaagent-0.9.jar=7072:/usr/local/spark/conf/spark-jmx.yml"
          {{- end }}
          {{- if .Values.prometheusExporter.enabled }}
          ports:
          - name: jmx-agent
            containerPort: 7072
          {{- end }}
          volumeMounts:
            - name: spark-conf
              mountPath: /usr/local/spark/conf/
          {{- if .Values.logCollector.enabled }}
            - name: logdir
              mountPath: /var/log/spark
          {{- end }}
        {{- if .Values.logCollector.enabled }}
        - name: filebeat
          image: "{{ .Values.logCollector.image.repository }}{{ .Values.logCollector.image.name }}:{{ .Values.logCollector.image.tag }}"
          imagePullPolicy: {{ .Values.logCollector.image.pullPolicy | quote }}
          volumeMounts:
          - name: filebeat-config
            mountPath: /etc/filebeat
          - name: logdir
            mountPath: /var/log/spark
          command:
            - "filebeat"
            - "-c"
            - "/etc/filebeat/filebeat.yml"
            - "-e"
            - "-d"
            - "\"*\""
        {{- end }}
      volumes:
        - name: spark-conf
          configMap:
            name: {{ printf "spark-conf-%s" .Release.Name | trunc 55 | trimSuffix "-" }}
      {{- if .Values.logCollector.enabled }}
        - name: filebeat-config
          configMap:
            name: {{ printf "spark-fb-%s" .Release.Name | trunc 55 | trimSuffix "-" }}
            items:
              - key: filebeat-yml
                path: filebeat.yml
        - name: logdir
          emptyDir: {}
      {{- end }}
